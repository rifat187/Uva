#include<bits/stdc++.h>
using namespace std;
#define		pb              push_back
#define		PB              pop_back
#define		nn              "\n"
#define		all(p)          p.begin(),p.end()
#define		ss              " "
#define		gcd(a,b)        __gcd(a,b)
#define		lcm(a,b)        (a*b)/gcd(a,b)
#define		pi              acos(-1.0)
typedef		long long       ll;
typedef		vector<ll>      vll;

int w(char c)
{
   if(c>='A'&&c<='Z'||c>='a'&&c<='z') return 0;
   return 1;
}
int main()
{
    string c;
    while(getline(cin,c))
    {
        ll p=c.size();
        ll y=1,cn=0;
        for(int i=0; i<p; i++)
        {
            if(w(c[i])) y=1;
            if(y)
            {
                if(c[i]>='A'&&c[i]<='Z'||c[i]>='a'&&c[i]<='z')
                {
                    cn++;
                    y=0;
                }
            }

            }
        cout<<cn<<nn;;

    }

    return 0;
}









// better solve 
#include <cstdio>
#include <climits>
#include <cstring>
using namespace std;

int main() {
	int B[3], G[3], C[3];

	while (scanf("%d %d %d %d %d %d %d %d %d", &B[0], &G[0], &C[0], &B[1],
			&G[1], &C[1], &B[2], &G[2], &C[2]) != EOF) {
		int min = INT_MAX, temp;
		char ans[4];
		//BCG
		temp = C[0] + G[0] + B[1] + G[1] + B[2] + C[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "BCG");
		}
		//BGC
		temp = C[0] + G[0] + B[1] + C[1] + B[2] + G[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "BGC");
		}
		//CBG
		temp = B[0] + G[0] + C[1] + G[1] + B[2] + C[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "CBG");
		}
		//CGB
		temp = B[0] + G[0] + B[1] + C[1] + G[2] + C[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "CGB");
		}
		//GBC
		temp = C[0] + B[0] + C[1] + G[1] + B[2] + G[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "GBC");
		}
		//GCB
		temp = C[0] + B[0] + B[1] + G[1] + G[2] + C[2];
		if (temp < min) {
			min = temp;
			strcpy(ans, "GCB");
		}

		printf("%s %d\n",ans,min);
	}

	return 0;
}
