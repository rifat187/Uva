#include<bits/stdc++.h>
using namespace std;
typedef      long long int    ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;



int main()
{
    int main()
    {
        int n, i, j, test = 0, A[1000];
        while(scanf("%d", &A[0]) == 1)
        {
            if(A[0] < 0)
                break;
            n = 1;
            while(scanf("%d", &A[n]) == 1)
            {
                if(A[n] < 0)
                    break;
                else
                    n++;
            }
            int DP[1000] = {};
            for(i = 0; i < n; i++)
            {
                for(j = i+1; j < n; j++)
                {
                    if(A[j] < A[i] && DP[j] < DP[i]+1)
                        DP[j] = DP[i]+1;
                }
            }
            int ans = 0;
            for(i = 0; i < n; i++)
                ans = ans > DP[i] ? ans : DP[i];
            ans++;
            if(test)
                puts("");
            printf("Test #%d:\n", ++test);
            printf("  maximum possible interceptions: %d\n", ans);

        }
        return 0;
    }
    
    
    
    
    /*
    
    
    
    
    
    
    
    
    This problem is based in the idea of selecting a sequence of non decreasing integer elements from an array in such a way that its length is maximised.

An {\displaystyle O(n^{2})}{\displaystyle O(n^{2})} algorithm is fast enough for the problem to be accepted.

A dynamic programming method can be used if executed as described below:

Let {\displaystyle H_{i}}{\displaystyle H_{i}} be the height of the missile (i) The missile 0 is at height infinity. Let {\displaystyle V_{i}}{\displaystyle V_{i}} be the interception count after i missiles have been faced by the catcher. Notice that {\displaystyle V_{0}}{\displaystyle V_{0}} = 0.

Then {\displaystyle Vi+1}{\displaystyle Vi+1} can be calculated as the maximum of the elements of V indexed from 0 to i whose height is smaller than or equal to the height {\displaystyle Hi+1}{\displaystyle Hi+1} added of 1 (the current interception).

That way, if 5 missiles at heights 5 10 9 7 16 face the catcher, the arrays can be defined as follows:

H = infinity 5 10 9 7 16

V = 0 1 1 2 3 1

To extract the result, get the largest element of V.




*/
